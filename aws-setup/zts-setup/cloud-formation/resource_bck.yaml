AWSTemplateFormatVersion: 2010-09-09
Description: 'Athenz ZTS standard 2 Availabilty zone configuration'
Parameters:
  DatabaseName:
    Type: String
    Description: Database Name
    Default: "ztsstore"
    MinLength: "1"
    MaxLength: "64"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: "must begin with a letter and contain only alphanumeric characters."
  DatabaseUsername:
    NoEcho: "true"
    Type: String
    Description: Database Username
    Default: "dbuser"
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: "must begin with a letter and contain only alphanumeric characters."
  DatabasePassword:
    NoEcho: "true"
    Type: String
    Description: Database Password
    Default: "dbpasswd"
    MinLength: "1"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: "must contain only alphanumeric characters."
  DatabaseInstanceClass:
    Type: String
    Description: "The database instance type"
    Default: "db.t2.medium"
    AllowedValues:
      - db.t1.micro
      - db.t1.micro
      - db.t1.micro
      - db.t1.micro
      - db.m1.small
      - db.m1.medium
      - db.m1.large
      - db.m1.xlarge
      - db.m2.xlarge
      - db.m2.2xlarge
      - db.m2.4xlarge
      - db.m3.medium
      - db.m3.large
      - db.m3.xlarge
      - db.m3.2xlarge
      - db.m4.large
      - db.m4.xlarge
      - db.m4.2xlarge
      - db.m4.4xlarge
      - db.m4.10xlarge
      - db.r3.large
      - db.r3.xlarge
      - db.r3.2xlarge
      - db.r3.4xlarge
      - db.r3.8xlarge
      - db.m2.xlarge
      - db.m2.2xlarge
      - db.m2.4xlarge
      - db.cr1.8xlarge
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
      - db.t2.large"
    ConstraintDescription: "must select a valid database instance type."
  ImageId:
    Type: AWS::EC2::Image::Id
    Description: "The ImageId to use for the EC2 instance.  Should be a format like ami-XXXXXXXX"
    Default: "ami-02c71d7a"
  ZTSServiceRole:
    Type: String
    Description: The ZTS Service IAM Role Name
    Default: "athenz.zts-service"
  ZTSServiceName:
    Type: String
    Description: The service name for ZTS server
    Default: "zts"
  AutoScalingMinSize:
    Type: String
    Description: The Athens domain for the account
    Default: "2"
  AutoScalingMaxSize:
    Type: String
    Description: The Athens domain for the account
    Default: "4"
  AutoScalingReplaceBatchSize:
    Type: String
    Description: The Athens domain for the account
    Default: "1"
  AutoScalingDesiredCapacity:
    Type: String
    Description: The Athens domain for the account
    Default: "2"
  EbsOptimized:
    Type: String
    Description: The Athens domain for the account
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
  EncryptDatabaseStorage:
    Type: String
    Description: The Athens domain for the account
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
  Ec2InstanceType:
    Type: String
    Description: The instance type to use for the host
    Default: t2.large
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.12xlarge
      - m5d.24xlarge
  ZTSVPCCidrBlock:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be an IP address block in Cidr notation."
    MaxLength: "18"
    MinLength: "9"
    Type: String
    Description: The CIDR block to use for the VPC.
    Default: "10.0.0.0/18"
  PrivateSubnet01CidrBlock:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be an IP address block in Cidr notation."
    MaxLength: "18"
    MinLength: "9"
    Type: String
    Description: The CIDR block to use for the VPC.
    Default: "10.0.0.0/22"
  PrivateSubnet02CidrBlock:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be an IP address block in Cidr notation."
    MaxLength: "18"
    MinLength: "9"
    Type: String
    Description: The CIDR block to use for the VPC.
    Default: "10.0.4.0/22"
  PublicSubnet01CidrBlock:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be an IP address block in Cidr notation."
    MaxLength: "18"
    MinLength: "9"
    Type: String
    Description: The CIDR block to use for the VPC.
    Default: "10.0.8.0/22"
  PublicSubnet02CidrBlock:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be an IP address block in Cidr notation."
    MaxLength: "18"
    MinLength: "9"
    Type: String
    Description: The CIDR block to use for the VPC.
    Default: "10.0.12.0/22"
  CertSignerPrivateSubnet01CidrBlock:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be an IP address block in Cidr notation."
    MaxLength: "18"
    MinLength: "9"
    Type: String
    Description: The CIDR block to use for the VPC.
    Default: "10.0.16.0/22"
  CertSignerPrivateSubnet02CidrBlock:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be an IP address block in Cidr notation."
    MaxLength: "18"
    MinLength: "9"
    Type: String
    Description: The CIDR block to use for the VPC.
    Default: "10.0.20.0/22"
  CertSignerPublicSubnet01CidrBlock:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be an IP address block in Cidr notation."
    MaxLength: "18"
    MinLength: "9"
    Type: String
    Description: The CIDR block to use for the VPC.
    Default: "10.0.26.0/23"
  CertSignerPublicSubnet02CidrBlock:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be an IP address block in Cidr notation."
    MaxLength: "18"
    MinLength: "9"
    Type: String
    Description: The CIDR block to use for the VPC.
    Default: "10.0.30.0/23"
  OwnerEmailTag:
    Type: String
    Description: The email address of the team who owns this stack.
    Default: "gurleenk@oath.com"
  ApplicationTag:
    Type: String
    Description: The value for the application tag
    Default: "Athenz ZTS Server"
  EbsVolumeType:
    Type: String
    Description: The value for EBS Volume type in Block Device Mappings for Launch Configuration
    Default: "gp2"
  EbsVolumeSize:
    Type: Number
    Description: The value for EBS Volume size Block Device Mappings for Launch Configuration
    Default: "50"
  GroupName:
    Type: String
    Description: The Athens domain for the account
    Default: "Athenz"
  Environment:
    Type: String
    Description: The environment ZTS is running in
    AllowedValues:
      - prod
      - stage
      - dev
  S3AccessLogBucketName:
    Type: String
    Description: S3 bucket name to store access logs
    Default: "athenz-cf-templates"
  Route53HostedZoneName:
    Type: String
    Description: The hosted zone name to place a CNAME entry for. Must end with a period. Empty string means do not create one.
    Default: "athens.aws.oath.cloud."
  Route53RecordName:
    Type: String
    Description: The hosted records to be added
    Default: "test.athens.aws.oath.cloud."
  Route53DatabaseRecordName:
    Type: String
    Description: The hosted records to be added
    Default: "test.db.athens.aws.oath.cloud."

Conditions:
  CreateDNSRecordSet: !Not [!Equals [ !Ref Route53HostedZoneName, '']]
  EnableDatabaseEncryption: !Equals [ !Ref EncryptDatabaseStorage , true]

Resources:
  ZTSVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref 'ZTSVPCCidrBlock'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-${AWS::StackName}
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  PrivateSubnetAvailabilityZone1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Ref 'PrivateSubnet01CidrBlock'
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-zts-${AWS::Region}a-private
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  PrivateSubnetAvailabilityZone2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Ref 'PrivateSubnet02CidrBlock'
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-zts-${AWS::Region}b-private
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  PublicSubnetAvailabilityZone1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Ref 'PublicSubnet01CidrBlock'
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-zts-${AWS::Region}a-public
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  PublicSubnetAvailabilityZone2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Ref 'PublicSubnet02CidrBlock'
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-zts-${AWS::Region}b-public
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  CertSignerPrivateSubnetZone1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Ref 'CertSignerPrivateSubnet01CidrBlock'
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-certsignd-${AWS::Region}a-private
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  CertSignerPrivateSubnetZone2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Ref 'CertSignerPrivateSubnet02CidrBlock'
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-certsignd-${AWS::Region}b-private
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  CertSignerPublicSubnetZone1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Ref 'CertSignerPublicSubnet01CidrBlock'
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-certsignd-${AWS::Region}a-public
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  CertSignerPublicSubnetZone2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Ref 'CertSignerPublicSubnet02CidrBlock'
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-certsignd-${AWS::Region}b-public
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  Nacl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-zts
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  NetworkAclEntry01:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      Egress: 'true'
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: !Ref 'ZTSVPCCidrBlock'
      PortRange:
        From: '22'
        To: '22'
  NetworkAclEntry02:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      Egress: 'true'
      RuleNumber: '110'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '4443'
        To: '4443'
  NetworkAclEntry03:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      Egress: 'true'
      RuleNumber: '120'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8443'
        To: '8443'
  NetworkAclEntry04:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      Egress: 'true'
      RuleNumber: '130'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '3306'
        To: '3306'
  NetworkAclEntry05:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      Egress: 'true'
      RuleNumber: '140'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  NetworkAclEntry06:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      Egress: 'true'
      RuleNumber: '150'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  NetworkAclEntry07:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      Egress: 'true'
      RuleNumber: '160'
      Protocol: "17"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '123'
        To: '123'
  NetworkAclEntry08:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      Egress: 'true'
      RuleNumber: '200'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  NetworkAclEntry09:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  NetworkAclEntry10:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      RuleNumber: '110'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '4443'
        To: '4443'
  NetworkAclEntry11:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      RuleNumber: '120'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8443'
        To: '8443'
  NetworkAclEntry12:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      RuleNumber: '130'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '3306'
        To: '3306'
  NetworkAclEntry13:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      RuleNumber: '140'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  NetworkAclEntry14:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      RuleNumber: '160'
      Protocol: "17"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  NetworkAclEntry15:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      RuleNumber: '150'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: !Ref 'ZTSVPCCidrBlock'
      PortRange:
        From: '123'
        To: '123'
  NetworkAclEntry16:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      RuleNumber: '200'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  PrivateSubnetAvailabilityZone1Nacl:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref 'PrivateSubnetAvailabilityZone1'
      NetworkAclId: !Ref 'Nacl'
  PrivateSubnetAvailabilityZone2Nacl:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref 'PrivateSubnetAvailabilityZone2'
      NetworkAclId: !Ref 'Nacl'
  PublicSubnetAvailabilityZone1Nacl:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref 'PublicSubnetAvailabilityZone1'
      NetworkAclId: !Ref 'Nacl'
  PublicSubnetAvailabilityZone2Nacl:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref 'PublicSubnetAvailabilityZone2'
      NetworkAclId: !Ref 'Nacl'
  CertSignerPrivateSubnetAvailabilityZone1Nacl:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref 'CertSignerPrivateSubnetZone1'
      NetworkAclId: !Ref 'Nacl'
  CertSignerPrivateSubnetAvailabilityZone2Nacl:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref 'CertSignerPrivateSubnetZone2'
      NetworkAclId: !Ref 'Nacl'
  CertSignerPublicSubnetAvailabilityZone1Nacl:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref 'CertSignerPublicSubnetZone1'
      NetworkAclId: !Ref 'Nacl'
  CertSignerPublicSubnetAvailabilityZone2Nacl:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref 'CertSignerPublicSubnetZone2'
      NetworkAclId: !Ref 'Nacl'
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-zts
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'ZTSVPC'
  PublicSubnetAvailabilityZone1NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt PublicSubnetAvailabilityZone1EIP.AllocationId
      SubnetId: !Ref 'PublicSubnetAvailabilityZone1'
      Tags:
         - Key: Name
           Value: !Sub ${Environment}-zts-${AWS::Region}a
         - Key: Environment
           Value: !Ref Environment
         - Key: Stack
           Value: !Ref AWS::StackName
  PublicSubnetAvailabilityZone1EIP:
      DependsOn: VPCGatewayAttachment
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
  PublicSubnetAvailabilityZone2NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt PublicSubnetAvailabilityZone2EIP.AllocationId
      SubnetId: !Ref 'PublicSubnetAvailabilityZone2'
      Tags:
         - Key: Name
           Value: !Sub ${Environment}-zts-${AWS::Region}b
         - Key: Environment
           Value: !Ref Environment
         - Key: Stack
           Value: !Ref AWS::StackName
  PublicSubnetAvailabilityZone2EIP:
      DependsOn: VPCGatewayAttachment
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
  CertSignerPublicSubnetAvailabilityZone1NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt CertSignerPublicSubnetAvailabilityZone1EIP.AllocationId
      SubnetId: !Ref 'CertSignerPublicSubnetZone1'
      Tags:
         - Key: Name
           Value: !Sub ${Environment}-certsignd-${AWS::Region}a
         - Key: Environment
           Value: !Ref Environment
         - Key: Stack
           Value: !Ref AWS::StackName
  CertSignerPublicSubnetAvailabilityZone1EIP:
      DependsOn: VPCGatewayAttachment
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
  CertSignerPublicSubnetAvailabilityZone2NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt CertSignerPublicSubnetAvailabilityZone2EIP.AllocationId
      SubnetId: !Ref 'CertSignerPublicSubnetZone2'
      Tags:
         - Key: Name
           Value: !Sub ${Environment}-certsignd-${AWS::Region}b
         - Key: Environment
           Value: !Ref Environment
         - Key: Stack
           Value: !Ref AWS::StackName
  CertSignerPublicSubnetAvailabilityZone2EIP:
      DependsOn: VPCGatewayAttachment
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
  PublicSubnetRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-zts-${AWS::Region}-public
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  GatewayRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
    DependsOn: VPCGatewayAttachment
  PrivateSubnetZone1RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-zts-${AWS::Region}a-private
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  PrivateSubnetZone1Route:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'PublicSubnetAvailabilityZone1NatGateway'
      RouteTableId: !Ref 'PrivateSubnetZone1RouteTable'
  PrivateSubnetZone2RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-zts-${AWS::Region}b-private
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  PrivateSubnetZone2Route:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'PublicSubnetAvailabilityZone2NatGateway'
      RouteTableId: !Ref 'PrivateSubnetZone2RouteTable'
    DependsOn: VPCGatewayAttachment
  CertSignerPrivateSubnetZone1RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-certsignd-${AWS::Region}a-private
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  CertSignerPrivateSubnetZone1Route:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'CertSignerPublicSubnetAvailabilityZone1NatGateway'
      RouteTableId: !Ref 'CertSignerPrivateSubnetZone1RouteTable'
  CertSignerPrivateSubnetZone2RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-certsignd-${AWS::Region}b-private
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  CertSignerPrivateSubnetZone2Route:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'CertSignerPublicSubnetAvailabilityZone2NatGateway'
      RouteTableId: !Ref 'CertSignerPrivateSubnetZone2RouteTable'
    DependsOn: VPCGatewayAttachment
  PublicSubnetZone1RouteTableAssociaton:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      SubnetId: !Ref 'PublicSubnetAvailabilityZone1'
  PublicSubnetZone2RouteTableAssociaton:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      SubnetId: !Ref 'PublicSubnetAvailabilityZone2'
  CertSignerPublicSubnetZone1RouteTableAssociaton:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      SubnetId: !Ref 'CertSignerPublicSubnetZone1'
  CertSignerPublicSubnetZone2RouteTableAssociaton:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      SubnetId: !Ref 'CertSignerPublicSubnetZone2'
  PrivateSubnetZone1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref 'PrivateSubnetZone1RouteTable'
      SubnetId: !Ref 'PrivateSubnetAvailabilityZone1'
  PrivateSubnetZone2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref 'PrivateSubnetZone2RouteTable'
      SubnetId: !Ref 'PrivateSubnetAvailabilityZone2'
  CertSignerPrivateSubnetZone1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref 'CertSignerPrivateSubnetZone1RouteTable'
      SubnetId: !Ref 'CertSignerPrivateSubnetZone1'
  CertSignerPrivateSubnetZone2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref 'CertSignerPrivateSubnetZone2RouteTable'
      SubnetId: !Ref 'CertSignerPrivateSubnetZone2'
  ZTSELBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub ${GroupName}-${Environment}-elb-sg-zts-${AWS::Region}
      GroupDescription: 'zts public elb security group'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '4443'
          ToPort: '4443'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-elb-zts-${AWS::Region}
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  ZTSServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub ${GroupName}-${Environment}-server-sg-zts-${AWS::Region}
      GroupDescription: 'zts public server security group'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '4443'
          ToPort: '4443'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '8443'
          ToPort: '8443'
          CidrIp: !Ref 'ZTSVPCCidrBlock'
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-server-zts-${AWS::Region}
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  ZTSLoadBalancer:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      HealthCheck:
        HealthyThreshold: 2
        Interval: 10
        Target: HTTPS:8443/zts/v1/status
        Timeout: 5
        UnhealthyThreshold: 2
      Listeners:
        - InstancePort: 4443
          InstanceProtocol: TCP
          LoadBalancerPort: 4443
          Protocol: TCP
      Policies:
        - PolicyName: "EnableProxyProtocol"
          PolicyType: "ProxyProtocolPolicyType"
          Attributes:
          - Name: ProxyProtocol
            Value: 'true'
          InstancePorts:
          - '4443'
      LoadBalancerName: !Sub ${Environment}-elb-zts-${AWS::Region}
      Scheme: 'internet-facing'
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: '60'
      CrossZone: true
      SecurityGroups:
        - !Ref ZTSELBSecurityGroup
      Subnets:
        - !Ref 'PublicSubnetAvailabilityZone1'
        - !Ref 'PublicSubnetAvailabilityZone2'
      AccessLoggingPolicy:
        S3BucketName: !Ref S3AccessLogBucketName
        S3BucketPrefix: elb-zts
        Enabled: 'true'
        EmitInterval: '60'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-elb-zts-${AWS::Region}
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  ZTSEC2AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref ZTSLaunchConfig
      LoadBalancerNames:
      - !Ref ZTSLoadBalancer
      MaxSize: !Ref AutoScalingMaxSize
      MinSize: !Ref AutoScalingMinSize
      Cooldown: 300
      VPCZoneIdentifier:
        - !Ref PrivateSubnetAvailabilityZone1
        - !Ref PrivateSubnetAvailabilityZone2
      DesiredCapacity: !Ref AutoScalingDesiredCapacity
      HealthCheckGracePeriod: 900
      HealthCheckType: ELB
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-asg-zts-${AWS::Region}
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true
        - Key: Stack
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true
  ZTSEC2IncreaseGroupSizeScalingPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ZTSEC2AutoScalingGroup
      Cooldown: 180
      ScalingAdjustment: 1
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '5'
      Statistic: Average
      Threshold: '50'
      Unit: Percent
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance
        is down
      Period: '60'
      AlarmActions:
      - Ref:  ZTSEC2IncreaseGroupSizeScalingPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: ZTSEC2AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  ZTSEC2DecreaseGroupSizeScalingPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ZTSEC2AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '5'
      Statistic: Average
      Threshold: '20'
      Unit: Percent
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance
        is down
      Period: '60'
      AlarmActions:
      - Ref:  ZTSEC2DecreaseGroupSizeScalingPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: ZTSEC2AutoScalingGroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
  ZTSLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Sub arn:aws:iam::${AWS::AccountId}:instance-profile/${ZTSServiceRole}
      ImageId: !Ref ImageId
      InstanceType: !Ref Ec2InstanceType
      EbsOptimized: !Ref EbsOptimized
      SecurityGroups:
        - !Ref ZTSServerSecurityGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: !Ref EbsVolumeSize
            VolumeType: !Ref EbsVolumeType
            DeleteOnTermination: true
      InstanceMonitoring: true
  ZTSRecordSet:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNSRecordSet
    Properties:
      Comment: CNAME record for the ZTS Server.
      HostedZoneName: !Ref Route53HostedZoneName
      Name: !Ref Route53RecordName
      TTL: 60
      Type: CNAME
      ResourceRecords:
        - !GetAtt ZTSLoadBalancer.DNSName
  DatabaseSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: CloudFormation managed DB subnet group.
        DBSubnetGroupName: !Sub ${Environment}-zts-db-subnet
        SubnetIds: [!Ref "PrivateSubnetAvailabilityZone1", !Ref "PrivateSubnetAvailabilityZone2"]
  DatabaseCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        Engine: aurora
        DatabaseName: !Ref "DatabaseName"
        MasterUsername: !Ref "DatabaseUsername"
        MasterUserPassword: !Ref "DatabasePassword"
        BackupRetentionPeriod: 7
        PreferredBackupWindow: 01:00-02:00
        PreferredMaintenanceWindow: mon:03:00-mon:04:00
        DBSubnetGroupName: !Ref "DatabaseSubnetGroup"
        VpcSecurityGroupIds: [!Ref "ZTSDBVPCSecurityGroup"]
        StorageEncrypted: !Ref EncryptDatabaseStorage
        KmsKeyId: !If [EnableDatabaseEncryption, !GetAtt DatabaseEncryptionKey.Arn, !Ref "AWS::NoValue"]
  ZTSDBVPCSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub ${GroupName}-${Environment}-rds-sg-zts-${AWS::Region}
      GroupDescription: 'zts public db security group'
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: '10.0.0.0/20'
      VpcId: !Ref 'ZTSVPC'
      Tags:
       - Key: Name
         Value: !Sub ${Environment}-rds-sg-zts-${AWS::Region}
       - Key: Environment
         Value: !Ref Environment
       - Key: Stack
         Value: !Ref AWS::StackName
  DatabaseEncryptionKey:
    Type: 'AWS::KMS::Key'
    Condition: EnableDatabaseEncryption
    Properties:
      Description: "KMS key for database encryption"
      EnableKeyRotation: true
      Enabled: true
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: 'kms:*'
            Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub ${DatabaseName}-${AWS::Region}-encryption-key
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  DatabaseEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Condition: EnableDatabaseEncryption
    Properties:
      AliasName: !Sub alias/${DatabaseName}-${AWS::Region}-encryption-key
      TargetKeyId: !Ref DatabaseEncryptionKey
  DatabasePrimaryInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora
      DBClusterIdentifier: !Ref "DatabaseCluster"
      DBInstanceClass: !Ref DatabaseInstanceClass
      DBSubnetGroupName: !Ref "DatabaseSubnetGroup"
      PubliclyAccessible: "false"
      DBInstanceIdentifier: !Ref "DatabaseName"
      Tags:
        - Key: Name
          Value: !Ref "DatabaseName"
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  DatabaseReplicaInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora
      DBClusterIdentifier: !Ref "DatabaseCluster"
      DBInstanceClass: !Ref DatabaseInstanceClass
      DBSubnetGroupName: !Ref "DatabaseSubnetGroup"
      PubliclyAccessible: "false"
      DBInstanceIdentifier: !Sub ${DatabaseName}-${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub ${DatabaseName}-${AWS::Region}
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  ZTSDatabaseRecordSet:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNSRecordSet
    Properties:
      Comment: CNAME record for the ZTS DB.
      HostedZoneName: !Ref Route53HostedZoneName
      Name: !Ref Route53DatabaseRecordName
      TTL: 60
      Type: CNAME
      ResourceRecords:
        - !GetAtt DatabaseCluster.Endpoint.Address
Outputs:
  DatabasePrimaryInstanceEndpoint:
    Description: Endpoint for primary database
    Value: !GetAtt DatabasePrimaryInstance.Endpoint.Address
  DatabaseReplicaInstanceEndpoint:
    Description: Endpoint for primary database
    Value: !GetAtt DatabaseReplicaInstance.Endpoint.Address
<testsuite name="Mocha Tests" tests="134" failures="0" errors="0" skipped="0" timestamp="Mon, 20 Aug 2018 20:45:54 GMT" time="0.143">
<testcase classname="PrincipalAuthority impl" name="should test PrincipalAuthority" time="0.001"/>
<testcase classname="PrincipalAuthority impl" name="should test initialize" time="0"/>
<testcase classname="PrincipalAuthority impl" name="should test getDomain" time="0"/>
<testcase classname="PrincipalAuthority impl" name="should test getHeader" time="0"/>
<testcase classname="PrincipalAuthority impl" name="should test authenticate" time="0.013"/>
<testcase classname="PrincipalAuthority impl" name="should test authenticate: signedToken Null: result null" time="0"/>
<testcase classname="PrincipalAuthority impl" name="should test authenticate: isValidAuthorizedServiceToken false: result null" time="0.004"/>
<testcase classname="PrincipalAuthority impl" name="should test authenticate: validate false: result null" time="0.004"/>
<testcase classname="PrincipalAuthority impl" name="should test authenticate: validation of authorized service failure: result null" time="0.004"/>
<testcase classname="PrincipalAuthority impl" name="should test authenticate: IP Mismatch: result error" time="0.004"/>
<testcase classname="PrincipalAuthority impl" name="should test _remoteIpCheck" time="0.003"/>
<testcase classname="PrincipalAuthority impl" name="should test _remoteIpCheck: authorizedServiceName Null and other remoteAddr: result false" time="0.002"/>
<testcase classname="PrincipalAuthority impl" name="should test _remoteIpCheck: other remoteAddr" time="0.003"/>
<testcase classname="PrincipalAuthority impl" name="should test _remoteIpCheck: writeOp false" time="0.002"/>
<testcase classname="PrincipalAuthority impl" name="should test _remoteIpCheck ipCheckMode OPS_ALL" time="0.002"/>
<testcase classname="PrincipalAuthority impl" name="should test _remoteIpCheck ipCheckMode OPS_ALL: invalid remoteAddr: result false" time="0.003"/>
<testcase classname="PrincipalAuthority impl" name="should test _remoteIpCheck ipCheckMode OPS_NONE" time="0.002"/>
<testcase classname="PrincipalAuthority impl" name="should test _remoteIpCheck ipCheckMode others: result false" time="0.002"/>
<testcase classname="PrincipalAuthority impl" name="should test _getPublicKey: keyService Null" time="0.001"/>
<testcase classname="PrincipalAuthority impl" name="should test _getPublicKey: userToken true" time="0"/>
<testcase classname="PrincipalAuthority impl" name="should test _getPublicKey: zms" time="0"/>
<testcase classname="PrincipalAuthority impl" name="should test _getPublicKey: zts" time="0"/>
<testcase classname="PrincipalAuthority impl" name="should test _isWriteOperation: httpMethod Null: result false" time="0"/>
<testcase classname="PrincipalAuthority impl" name="should test _isWriteOperation: httpMethod PUT POST DELETE" time="0"/>
<testcase classname="PrincipalAuthority impl" name="should test _isWriteOperation: invalid httpMethod: result false" time="0"/>
<testcase classname="PrincipalAuthority impl" name="should test _getAuthorizedServiceName" time="0"/>
<testcase classname="PrincipalAuthority impl" name="should test _getAuthorizedServiceName: authorizedServiceName Null and authorizedServices have only" time="0"/>
<testcase classname="PrincipalAuthority impl" name="should test _getAuthorizedServiceName: authorizedServiceName Null: result null" time="0"/>
<testcase classname="PrincipalAuthority impl" name="should test _getAuthorizedServiceName: authorizedServices doesn't contain authorizedServiceName: result null" time="0"/>
<testcase classname="PrincipalAuthority impl" name="should test _validateAuthorizeService" time="0.002"/>
<testcase classname="PrincipalAuthority impl" name="should test _validateAuthorizeService: authorizedServiceName null and authorizedServices null: result null" time="0"/>
<testcase classname="PrincipalAuthority impl" name="should test _validateAuthorizeService: authorizedServiceName null and authorizedService Only" time="0.003"/>
<testcase classname="PrincipalAuthority impl" name="should test _validateAuthorizeService: invalid authorizedServiceName: result null" time="0.001"/>
<testcase classname="PrincipalAuthority impl" name="should test _validateAuthorizeService: token validation for authorized service failed" time="0.001"/>
<testcase classname="PrincipalAuthority impl" name="should test setKeyStore" time="0"/>
<testcase classname="RoleAuthority impl" name="should test RoleAuthority" time="0"/>
<testcase classname="RoleAuthority impl" name="should test initialize" time="0"/>
<testcase classname="RoleAuthority impl" name="should test getDomain" time="0"/>
<testcase classname="RoleAuthority impl" name="should test getHeader" time="0.001"/>
<testcase classname="RoleAuthority impl" name="should test authenticate" time="0.003"/>
<testcase classname="RoleAuthority impl" name="should test authenticate: signedToken Null: result null" time="0"/>
<testcase classname="RoleAuthority impl" name="should test authenticate: validate false: result null" time="0.003"/>
<testcase classname="RoleAuthority impl" name="should test authenticate: token principal has no domain: result null" time="0.003"/>
<testcase classname="RoleAuthority impl" name="should test authenticate: IP Mismatch: result error" time="0.002"/>
<testcase classname="RoleAuthority impl" name="should test _isWriteOperation: httpMethod Null: result false" time="0"/>
<testcase classname="RoleAuthority impl" name="should test _isWriteOperation: httpMethod PUT POST DELETE" time="0.001"/>
<testcase classname="RoleAuthority impl" name="should test _isWriteOperation: invalid httpMethod: result false" time="0"/>
<testcase classname="RoleAuthority impl" name="should test setKeyStore" time="0"/>
<testcase classname="SimplePrincipal impl" name="should test create" time="0.001"/>
<testcase classname="SimplePrincipal impl" name="should test createByRoles" time="0.001"/>
<testcase classname="SimplePrincipal impl" name="should test createByRoles: invalid domain or invalid roles" time="0"/>
<testcase classname="SimplePrincipal impl" name="should test createByIdentity" time="0.001"/>
<testcase classname="SimplePrincipal impl" name="should test createByUserIdentity" time="0"/>
<testcase classname="SimplePrincipal impl" name="should test createByUserIdentity: invalid name: result null" time="0"/>
<testcase classname="SimplePrincipal impl" name="should test createByUserIdentity: domain Null and authority null" time="0"/>
<testcase classname="SimplePrincipal impl" name="should test createByUserIdentity: no match domain to authority domain: result null" time="0"/>
<testcase classname="SimplePrincipal impl" name="should test createByUserIdentity: authority Null: result null" time="0"/>
<testcase classname="SimplePrincipal impl" name="should test createByUserIdentity: domain null: result null" time="0"/>
<testcase classname="SimplePrincipal impl" name="should test createByHostIdentity" time="0"/>
<testcase classname="SimplePrincipal impl" name="should test set/getUnsignedCreds" time="0"/>
<testcase classname="SimplePrincipal impl" name="should test set/getAuthorizedService" time="0"/>
<testcase classname="SimplePrincipal impl" name="should test set/getIP" time="0.001"/>
<testcase classname="SimplePrincipal impl" name="should test set/getOriginalRequestor" time="0"/>
<testcase classname="SimplePrincipal impl" name="should test set/getKeyService" time="0"/>
<testcase classname="SimplePrincipal impl" name="should test set/getKeyId" time="0"/>
<testcase classname="SimplePrincipal impl" name="should test set/getX509Certificate" time="0"/>
<testcase classname="SimplePrincipal impl" name="should test getFullName" time="0"/>
<testcase classname="SimplePrincipal impl" name="should test getFullName" time="0"/>
<testcase classname="SimpleServiceIdentityProvider impl" name="should test SimpleServiceIdentityProvider" time="0.001"/>
<testcase classname="SimpleServiceIdentityProvider impl" name="should test getIdentity" time="0.002"/>
<testcase classname="SimpleServiceIdentityProvider impl" name="should test getIdentity: no match domainName: result null" time="0"/>
<testcase classname="SimpleServiceIdentityProvider impl" name="should test getIdentity: no match serviceName: result null" time="0"/>
<testcase classname="SimpleServiceIdentityProvider impl" name="should test _getServerHostName" time="0"/>
<testcase classname="SimpleServiceIdentityProvider impl" name="should test set/getHost" time="0"/>
<testcase classname="SimpleServiceIdentityProvider impl" name="should test setTokenTimeout" time="0"/>
<testcase classname="PrincipalToken impl" name="should test PrincipalToken: null: result error" time="0"/>
<testcase classname="PrincipalToken impl" name="should test PrincipalToken: using signedToken" time="0.001"/>
<testcase classname="PrincipalToken impl" name="should test PrincipalToken: using signedToken: signedToken Null: result error" time="0"/>
<testcase classname="PrincipalToken impl" name="should test PrincipalToken: using signedToken: domain Null: result error" time="0"/>
<testcase classname="PrincipalToken impl" name="should test PrincipalToken: using signedToken: name Null: result error" time="0.001"/>
<testcase classname="PrincipalToken impl" name="should test PrincipalToken: using tokenObject" time="0"/>
<testcase classname="PrincipalToken impl" name="should test PrincipalToken: using tokenObject: version Null: result error" time="0"/>
<testcase classname="PrincipalToken impl" name="should test PrincipalToken: using tokenObject: domain Null: result error" time="0"/>
<testcase classname="PrincipalToken impl" name="should test PrincipalToken: using tokenObject: name Null: result error" time="0"/>
<testcase classname="PrincipalToken impl" name="should test signForAuthorizedService" time="0.002"/>
<testcase classname="PrincipalToken impl" name="should test signForAuthorizedService: invalid authorizedServiceName: result error" time="0"/>
<testcase classname="PrincipalToken impl" name="should test signForAuthorizedService: authorizedServiceName Null: result error" time="0.001"/>
<testcase classname="PrincipalToken impl" name="should test validateForAuthorizedService" time="0.002"/>
<testcase classname="PrincipalToken impl" name="should test validateForAuthorizedService: authorizedServiceSignature Null: result false" time="0.001"/>
<testcase classname="PrincipalToken impl" name="should test validateForAuthorizedService: signedTokrn no Authorized signature: result false" time="0.004"/>
<testcase classname="PrincipalToken impl" name="should test validateForAuthorizedService: publicKey Null: result false" time="0.002"/>
<testcase classname="PrincipalToken impl" name="should test validateForAuthorizedService: other publicKey: result false" time="0.002"/>
<testcase classname="PrincipalToken impl" name="should test validateForAuthorizedService: invalid publicKey: result false" time="0.001"/>
<testcase classname="PrincipalToken impl" name="should test isValidAuthorizedServiceToken" time="0.002"/>
<testcase classname="PrincipalToken impl" name="should test isValidAuthorizedServiceToken: no authorizedServices and no authorizedServiceSignature" time="0"/>
<testcase classname="PrincipalToken impl" name="should test isValidAuthorizedServiceToken: authorizedServices contains only entry" time="0"/>
<testcase classname="PrincipalToken impl" name="should test isValidAuthorizedServiceToken: authorizedServices Null and existed authorizedServiceSignature: result false" time="0.001"/>
<testcase classname="PrincipalToken impl" name="should test isValidAuthorizedServiceToken: authorizedServiceSignature Null: result false" time="0"/>
<testcase classname="PrincipalToken impl" name="should test isValidAuthorizedServiceToken: authorizedServices doesn't include authorizedServiceName: result false" time="0.001"/>
<testcase classname="PrincipalToken impl" name="should test isValidAuthorizedServiceToken: No service name and Authorized service list contains multiple entries: result false" time="0.001"/>
<testcase classname="RoleToken impl" name="should test RoleToken: null: result error" time="0"/>
<testcase classname="RoleToken impl" name="should test RoleToken: using signedToken" time="0.001"/>
<testcase classname="RoleToken impl" name="should test RoleToken: using signedToken: signedToken Null: result error" time="0.001"/>
<testcase classname="RoleToken impl" name="should test RoleToken: using signedToken: domain Null: result error" time="0"/>
<testcase classname="RoleToken impl" name="should test RoleToken: using signedToken: name Null: result error" time="0"/>
<testcase classname="RoleToken impl" name="should test RoleToken: using tokenObject" time="0"/>
<testcase classname="RoleToken impl" name="should test RoleToken: using tokenObject with minimum params" time="0.001"/>
<testcase classname="RoleToken impl" name="should test RoleToken: using tokenObject: version Null: result error" time="0"/>
<testcase classname="RoleToken impl" name="should test RoleToken: using tokenObject: domain Null: result error" time="0.001"/>
<testcase classname="RoleToken impl" name="should test RoleToken: using tokenObject: name Null: result error" time="0"/>
<testcase classname="Token impl" name="should test sign" time="0.002"/>
<testcase classname="Token impl" name="should test sign: invalid argument: result error" time="0"/>
<testcase classname="Token impl" name="should test setTimeStamp" time="0"/>
<testcase classname="Token impl" name="should test setTimeStamp: issueTime &lt; 0" time="0"/>
<testcase classname="Token impl" name="should test setTimeStamp" time="0"/>
<testcase classname="Token impl" name="should test validate" time="0"/>
<testcase classname="Token impl" name="should test validate: null unsignedToken or null signature: result false" time="0.001"/>
<testcase classname="Token impl" name="should test validate: null publicKey: result false" time="0"/>
<testcase classname="Token impl" name="should test validate: timeStamp over now: result false" time="0"/>
<testcase classname="Token impl" name="should test validate: now over expiryTime: result false" time="0"/>
<testcase classname="Token impl" name="should test validate: expiryTime over now + allowedOffset: result false" time="0"/>
<testcase classname="Token impl" name="should test validate: other publicKey: result false" time="0.001"/>
<testcase classname="Token impl" name="should test validate: invalid publicKey: result false" time="0"/>
<testcase classname="Crypto util" name="should hmac digest eqals test data" time="0"/>
<testcase classname="Crypto util" name="should signeture eqals test data with ybase64 key" time="0.003"/>
<testcase classname="Crypto util" name="should result be true with ybase64 key and ybase64 signeture" time="0"/>
<testcase classname="Crypto util" name="should result be true with ybase64 key and base64 signeture" time="0.001"/>
<testcase classname="Crypto util" name="should result be false with wrong ybase64 key and ybase64 signeture" time="0"/>
<testcase classname="Crypto util" name="should test randaomSalt" time="0"/>
<testcase classname="Validate util" name="should validate principal name" time="0"/>
<testcase classname="Validate util" name="should validate domain name" time="0"/>
<testcase classname="YBase64 util" name="should ybase64 string eqals test data" time="0"/>
<testcase classname="YBase64 util" name="should string eqals ybase64 decoded test data" time="0.001"/>
<testcase classname="YBase64 util" name="should test ybase64Decode: invalid input: result error" time="0"/>
</testsuite>

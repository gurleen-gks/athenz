AWSTemplateFormatVersion: 2010-09-09
Description: 'Testing Boolean Parameters'
Parameters:
  DatabaseName:
    Type: String
    Description: Database Name
    Default: "ztsstore"
    MinLength: "1"
    MaxLength: "64"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: "must begin with a letter and contain only alphanumeric characters."
  DatabaseUsername:
    NoEcho: "true"
    Type: String
    Description: Database Username
    Default: "dbuser"
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: "must begin with a letter and contain only alphanumeric characters."
  DatabasePassword:
    NoEcho: "true"
    Type: String
    Description: Database Password
    Default: "dbpasswd"
    MinLength: "1"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: "must contain only alphanumeric characters."
  DatabaseInstanceClass:
    Type: String
    Description: "The database instance type"
    Default: "db.t2.medium"
    AllowedValues:
      - db.t1.micro
      - db.t1.micro
      - db.t1.micro
      - db.t1.micro
      - db.m1.small
      - db.m1.medium
      - db.m1.large
      - db.m1.xlarge
      - db.m2.xlarge
      - db.m2.2xlarge
      - db.m2.4xlarge
      - db.m3.medium
      - db.m3.large
      - db.m3.xlarge
      - db.m3.2xlarge
      - db.m4.large
      - db.m4.xlarge
      - db.m4.2xlarge
      - db.m4.4xlarge
      - db.m4.10xlarge
      - db.r3.large
      - db.r3.xlarge
      - db.r3.2xlarge
      - db.r3.4xlarge
      - db.r3.8xlarge
      - db.m2.xlarge
      - db.m2.2xlarge
      - db.m2.4xlarge
      - db.cr1.8xlarge
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
      - db.t2.large"
    ConstraintDescription: "must select a valid database instance type."
  ImageId:
    Type: AWS::EC2::Image::Id
    Description: "The ImageId to use for the EC2 instance.  Should be a format like ami-XXXXXXXX"
    Default: "ami-2e8ada56"
  ZTSServiceRole:
    Type: String
    Description: The ZTS Service IAM Role Name
    Default: "athenz.zts-service"
  ZTSServiceName:
    Type: String
    Description: The service name for ZTS server
    Default: "zts"
  EncryptDatabaseStorage:
    Type: String
    Description: The Athens domain for the account
    AllowedValues:
     - "true"
     - "false"
    Default: "true"
  ZTSVPCCidrBlock:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be an IP address block in Cidr notation."
    MaxLength: "18"
    MinLength: "9"
    Type: String
    Description: The CIDR block to use for the VPC.
    Default: "10.0.0.0/18"
  PrivateSubnet01CidrBlock:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be an IP address block in Cidr notation."
    MaxLength: "18"
    MinLength: "9"
    Type: String
    Description: The CIDR block to use for the VPC.
    Default: "10.0.0.0/22"
  PrivateSubnet02CidrBlock:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be an IP address block in Cidr notation."
    MaxLength: "18"
    MinLength: "9"
    Type: String
    Description: The CIDR block to use for the VPC.
    Default: "10.0.4.0/22"
  PublicSubnet01CidrBlock:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be an IP address block in Cidr notation."
    MaxLength: "18"
    MinLength: "9"
    Type: String
    Description: The CIDR block to use for the VPC.
    Default: "10.0.8.0/22"
  PublicSubnet02CidrBlock:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be an IP address block in Cidr notation."
    MaxLength: "18"
    MinLength: "9"
    Type: String
    Description: The CIDR block to use for the VPC.
    Default: "10.0.12.0/22"
  ApplicationTag:
    Type: String
    Description: The value for the application tag
    Default: "Athenz ZTS Server"
  GroupName:
    Type: String
    Description: The Athens domain for the account
    Default: "Athenz"
  Environment:
    Type: String
    Description: The environment ZTS is running in
    AllowedValues:
      - prod
      - stage
      - dev
  Region:
    Type: String
    Description: The region ZTS is running in
    Default: "us-west-2"
Conditions:
  EnableDatabaseEncryption: !Equals [ !Ref EncryptDatabaseStorage, true]

Resources:
  ZTSVPC:
      Type: 'AWS::EC2::VPC'
      Properties:
        CidrBlock: !Ref 'ZTSVPCCidrBlock'
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: !Join
              - "-"
              - - !Ref Environment
                - !Ref AWS::StackName
          - Key: Environment
            Value: !Ref Environment
          - Key: Stack
            Value: !Ref AWS::StackName
  PrivateSubnetAvailabilityZone1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Ref 'PrivateSubnet01CidrBlock'
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-zts-${Region}a-private
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  PublicSubnetAvailabilityZone1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Ref 'PublicSubnet01CidrBlock'
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-zts-${Region}a-public
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-zts
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'ZTSVPC'
  PublicSubnetAvailabilityZone1NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - PublicSubnetAvailabilityZone1EIP
          - AllocationId
      SubnetId: !Ref 'PublicSubnetAvailabilityZone1'
      Tags:
         - Key: Name
           Value: !Sub ${Environment}-zts-${Region}a
         - Key: Environment
           Value: !Ref Environment
         - Key: Stack
           Value: !Ref AWS::StackName
  PublicSubnetAvailabilityZone1EIP:
      DependsOn: VPCGatewayAttachment
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
  PublicSubnetRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-zts-${Region}-public
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  GatewayRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
    DependsOn: VPCGatewayAttachment
  PrivateSubnetZone1RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-zts-${Region}a-private
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  PrivateSubnetZone1Route:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'PublicSubnetAvailabilityZone1NatGateway'
      RouteTableId: !Ref 'PrivateSubnetZone1RouteTable'
  PublicSubnetZone1RouteTableAssociaton:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      SubnetId: !Ref 'PublicSubnetAvailabilityZone1'
  PrivateSubnetZone1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref 'PrivateSubnetZone1RouteTable'
      SubnetId: !Ref 'PrivateSubnetAvailabilityZone1'
  ZTSServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Join
        - '-'
        -  - !Ref GroupName
           - !Ref Environment
           - 'server-sg-zts'
           - !Ref Region
      GroupDescription: 'zts public server security group'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '4443'
          ToPort: '4443'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '8443'
          ToPort: '8443'
          CidrIp: !Ref 'ZTSVPCCidrBlock'
      VpcId: !Ref 'ZTSVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-server-zts-${Region}
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  DatabaseEncryptionKey:
    Type: 'AWS::KMS::Key'
    Condition: EnableDatabaseEncryption
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 'kms:*'
            Resource: '*'
  DatabasePrimaryInstance:
    Type: AWS::RDS::DBInstance
    Properties:
     Engine: aurora
     AllocatedStorage: 10
     DBName: !Ref "DatabaseName"
     MasterUsername: !Ref "DatabaseUsername"
     MasterUserPassword: !Ref "DatabasePassword"
     BackupRetentionPeriod: 7
     PreferredBackupWindow: 01:00-02:00
     PreferredMaintenanceWindow: mon:03:00-mon:04:00
     AvailabilityZone:
             Fn::Select:
               - 0
               - Fn::GetAZs: ""
     StorageEncrypted: !Ref EncryptDatabaseStorage
     KmsKeyId: !If [EnableDatabaseEncryption, !Ref DatabaseEncryptionKey, !Ref "AWS::NoValue"]
     DBInstanceClass: !Ref DatabaseInstanceClass
     AvailabilityZone:
              Fn::Select:
                - 0
                - Fn::GetAZs: ""
     PubliclyAccessible: "false"
     Tags:
       - Key: Name
         Value: !Ref "DatabaseName"
       - Key: Environment
         Value: !Ref Environment
       - Key: Stack
         Value: !Ref AWS::StackName